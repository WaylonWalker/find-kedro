{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u00b6 find-kedro is a small library to enhance your kedro experience. It looks through your modules to find kedro pipelines, nodes, and iterables (lists, sets, tuples) of nodes. It then assembles them into a dictionary of pipelines, each module will create a separate pipeline, and __default__ being a combination of all pipelines. This format is compatible with the kedro _create_pipelines format. \u00b6 find-kedro is deployed to pypi and can easily be pip installed. if you dont already have python and kedro installed follow the kedro prerequisites pip install find-kedro ---> 100% Successfully installed find-kedro Example Response \u00b6 { \"__default__\" : [ \"create_int_iris\" , ], \"pipelines.data_engineering.pipeline\" : [ \"create_int_iris\" , ],","title":"find-kedro"},{"location":"#_1","text":"find-kedro is a small library to enhance your kedro experience. It looks through your modules to find kedro pipelines, nodes, and iterables (lists, sets, tuples) of nodes. It then assembles them into a dictionary of pipelines, each module will create a separate pipeline, and __default__ being a combination of all pipelines. This format is compatible with the kedro _create_pipelines format.","title":""},{"location":"#_2","text":"find-kedro is deployed to pypi and can easily be pip installed. if you dont already have python and kedro installed follow the kedro prerequisites pip install find-kedro ---> 100% Successfully installed find-kedro","title":""},{"location":"#example-response","text":"{ \"__default__\" : [ \"create_int_iris\" , ], \"pipelines.data_engineering.pipeline\" : [ \"create_int_iris\" , ],","title":"Example Response"},{"location":"cli-usage/","text":"\u00b6 The cli provides a handy interface to search your project for nodes. It is primarily useful for debugging. Running the cli with --verbose will list out each module and variable picked up // run help $ kedro --help Usage: find-kedro [OPTIONS] Options: --file-patterns TEXT glob-style file patterns for Python node module discovery --patterns TEXT prefixes or glob names for Python pipeline, node, or list object discovery -d, --directory DIRECTORY Path to save the static site to --version Prints version and exits -v, --verbose Prints extra information for debugging --help Show this message and exit. get the latest version \u00b6 // run find-kedro --version $ find-kedro --version 0.0.1 Example ran with a slightly modified default kedro new project. // run find-kedro $ find-kedro { \"__default__\": [ \"create_int_iris\", ], \"pipelines.data_engineering.pipeline\": [ \"create_int_iris\", ], Verbose Examples \u00b6 running find-kedro -d src -v inside of a slightly modified default template will yield the following. $ find-kedro -d src -v python version: 3.7.7 (default, Mar 26 2020, 15:48:22) [GCC 7.3.0] current directory: /mnt/c/temp/test_project_template/default-kedro-159 find nodes recieved the following input file_patterns: ('*node*', '*pipeline*') patterns: ('*node*', '*pipeline*') directory: src version: 0.0.3 verbose: True \u2015\u2015\u2015\u2015\u2015\u2015 FIND KEDRO START \u2015\u2015\u2015\u2015\u2015\u2015 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 raw inputs file_patterns: ('*node*', '*pipeline*') patterns: ('*node*', '*pipeline*') \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 cleansed inputs file_patterns: ['**/*node*.py', '**/*pipeline*.py'] patterns: ['*node*', '*pipeline*'] \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 pattern matched modules num_modules_found: 5 directory: src files_found: ['default_kedro_159/pipelines/data_science/nodes.py', 'default_kedro_159/pipelines/data_engineering/pipeline.py', 'default_kedro_159/pipelines/data_engineering/nodes.py', 'default_kedro_159/pipeline.py', 'default_kedro_159/pipelines/data_science/pipeline.py'] \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 modules found with file pattern match modules: {'default_kedro_159.pipelines.data_science.nodes': <module 'nodes.py' from 'default_kedro_159/pipelines/data_science/nodes.py'>, 'default_kedro_159.pipelines.data_engineering.pipeline': <module 'default_kedro_159.pipelines.data_engineering.pipeline' from '/mnt/c/temp/test_project_template/default-kedro-159/src/default_kedro_159/pipelines/data_engineering/pipeline.py'>, 'default_kedro_159.pipelines.data_engineering.nodes': <module 'nodes.py' from 'default_kedro_159/pipelines/data_engineering/nodes.py'>, 'default_kedro_159.pipeline': <module 'pipeline.py' from 'default_kedro_159/pipeline.py'>, 'default_kedro_159.pipelines.data_science.pipeline': <module 'default_kedro_159.pipelines.data_science.pipeline' from '/mnt/c/temp/test_project_template/default-kedro-159/src/default_kedro_159/pipelines/data_science/pipeline.py'>} \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 module found with nodes pattern match nodes: {'default_kedro_159.pipelines.data_engineering.pipeline': [Node(split_data, ['example_iris_data', 'params:example_test_data_ratio'], {'train_x': 'example_train_x', 'train_y': 'example_train_y', 'test_x': 'example_test_x', 'test_y': 'example_test_y'}, None)], 'default_kedro_159.pipelines.data_science.pipeline': [Node(report_accuracy, ['example_predictions', 'example_test_y'], None, None), Node(train_model, ['example_train_x', 'example_train_y', 'parameters'], 'example_model', None), Node(predict, {'model': 'example_model', 'test_x': 'example_test_x'}, 'example_predictions', None)]} \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 generated pipelines pipelines: {'default_kedro_159.pipelines.data_engineering.pipeline': Pipeline([ Node(split_data, ['example_iris_data', 'params:example_test_data_ratio'], {'train_x': 'example_train_x', 'train_y': 'example_train_y', 'test_x': 'example_test_x', 'test_y': 'example_test_y'}, None) ]), 'default_kedro_159.pipelines.data_science.pipeline': Pipeline([ Node(train_model, ['example_train_x', 'example_train_y', 'parameters'], 'example_model', None), Node(predict, {'model': 'example_model', 'test_x': 'example_test_x'}, 'example_predictions', None), Node(report_accuracy, ['example_predictions', 'example_test_y'], None, None) ]), '__default__': Pipeline([ Node(split_data, ['example_iris_data', 'params:example_test_data_ratio'], {'train_x': 'example_train_x', 'train_y': 'example_train_y', 'test_x': 'example_test_x', 'test_y': 'example_test_y'}, None), Node(train_model, ['example_train_x', 'example_train_y', 'parameters'], 'example_model', None), Node(predict, {'model': 'example_model', 'test_x': 'example_test_x'}, 'example_predictions', None), Node(report_accuracy, ['example_predictions', 'example_test_y'], None, None) ])} \u2015\u2015\u2015\u2015\u2015\u2015 FIND KEDRO END \u2015\u2015\u2015\u2015\u2015\u2015 { \"__default__\": [ \"split_data([example_iris_data,params:example_test_data_ratio]) -> [example_test_x,example_test_y,example_train_x,example_train_y]\", \"train_model([example_train_x,example_train_y,parameters]) -> [example_model]\", \"predict([example_model,example_test_x]) -> [example_predictions]\", \"report_accuracy([example_predictions,example_test_y]) -> None\" ], \"default_kedro_159.pipelines.data_engineering.pipeline\": [ \"split_data([example_iris_data,params:example_test_data_ratio]) -> [example_test_x,example_test_y,example_train_x,example_train_y]\" ], \"default_kedro_159.pipelines.data_science.pipeline\": [ \"train_model([example_train_x,example_train_y,parameters]) -> [example_model]\", \"predict([example_model,example_test_x]) -> [example_predictions]\", \"report_accuracy([example_predictions,example_test_y]) -> None\" ] }","title":"cli-usage"},{"location":"cli-usage/#_1","text":"The cli provides a handy interface to search your project for nodes. It is primarily useful for debugging. Running the cli with --verbose will list out each module and variable picked up // run help $ kedro --help Usage: find-kedro [OPTIONS] Options: --file-patterns TEXT glob-style file patterns for Python node module discovery --patterns TEXT prefixes or glob names for Python pipeline, node, or list object discovery -d, --directory DIRECTORY Path to save the static site to --version Prints version and exits -v, --verbose Prints extra information for debugging --help Show this message and exit.","title":""},{"location":"cli-usage/#get-the-latest-version","text":"// run find-kedro --version $ find-kedro --version 0.0.1 Example ran with a slightly modified default kedro new project. // run find-kedro $ find-kedro { \"__default__\": [ \"create_int_iris\", ], \"pipelines.data_engineering.pipeline\": [ \"create_int_iris\", ],","title":"get the latest version"},{"location":"cli-usage/#verbose-examples","text":"running find-kedro -d src -v inside of a slightly modified default template will yield the following. $ find-kedro -d src -v python version: 3.7.7 (default, Mar 26 2020, 15:48:22) [GCC 7.3.0] current directory: /mnt/c/temp/test_project_template/default-kedro-159 find nodes recieved the following input file_patterns: ('*node*', '*pipeline*') patterns: ('*node*', '*pipeline*') directory: src version: 0.0.3 verbose: True \u2015\u2015\u2015\u2015\u2015\u2015 FIND KEDRO START \u2015\u2015\u2015\u2015\u2015\u2015 \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 raw inputs file_patterns: ('*node*', '*pipeline*') patterns: ('*node*', '*pipeline*') \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 cleansed inputs file_patterns: ['**/*node*.py', '**/*pipeline*.py'] patterns: ['*node*', '*pipeline*'] \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 pattern matched modules num_modules_found: 5 directory: src files_found: ['default_kedro_159/pipelines/data_science/nodes.py', 'default_kedro_159/pipelines/data_engineering/pipeline.py', 'default_kedro_159/pipelines/data_engineering/nodes.py', 'default_kedro_159/pipeline.py', 'default_kedro_159/pipelines/data_science/pipeline.py'] \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 modules found with file pattern match modules: {'default_kedro_159.pipelines.data_science.nodes': <module 'nodes.py' from 'default_kedro_159/pipelines/data_science/nodes.py'>, 'default_kedro_159.pipelines.data_engineering.pipeline': <module 'default_kedro_159.pipelines.data_engineering.pipeline' from '/mnt/c/temp/test_project_template/default-kedro-159/src/default_kedro_159/pipelines/data_engineering/pipeline.py'>, 'default_kedro_159.pipelines.data_engineering.nodes': <module 'nodes.py' from 'default_kedro_159/pipelines/data_engineering/nodes.py'>, 'default_kedro_159.pipeline': <module 'pipeline.py' from 'default_kedro_159/pipeline.py'>, 'default_kedro_159.pipelines.data_science.pipeline': <module 'default_kedro_159.pipelines.data_science.pipeline' from '/mnt/c/temp/test_project_template/default-kedro-159/src/default_kedro_159/pipelines/data_science/pipeline.py'>} \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 module found with nodes pattern match nodes: {'default_kedro_159.pipelines.data_engineering.pipeline': [Node(split_data, ['example_iris_data', 'params:example_test_data_ratio'], {'train_x': 'example_train_x', 'train_y': 'example_train_y', 'test_x': 'example_test_x', 'test_y': 'example_test_y'}, None)], 'default_kedro_159.pipelines.data_science.pipeline': [Node(report_accuracy, ['example_predictions', 'example_test_y'], None, None), Node(train_model, ['example_train_x', 'example_train_y', 'parameters'], 'example_model', None), Node(predict, {'model': 'example_model', 'test_x': 'example_test_x'}, 'example_predictions', None)]} \u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015 generated pipelines pipelines: {'default_kedro_159.pipelines.data_engineering.pipeline': Pipeline([ Node(split_data, ['example_iris_data', 'params:example_test_data_ratio'], {'train_x': 'example_train_x', 'train_y': 'example_train_y', 'test_x': 'example_test_x', 'test_y': 'example_test_y'}, None) ]), 'default_kedro_159.pipelines.data_science.pipeline': Pipeline([ Node(train_model, ['example_train_x', 'example_train_y', 'parameters'], 'example_model', None), Node(predict, {'model': 'example_model', 'test_x': 'example_test_x'}, 'example_predictions', None), Node(report_accuracy, ['example_predictions', 'example_test_y'], None, None) ]), '__default__': Pipeline([ Node(split_data, ['example_iris_data', 'params:example_test_data_ratio'], {'train_x': 'example_train_x', 'train_y': 'example_train_y', 'test_x': 'example_test_x', 'test_y': 'example_test_y'}, None), Node(train_model, ['example_train_x', 'example_train_y', 'parameters'], 'example_model', None), Node(predict, {'model': 'example_model', 'test_x': 'example_test_x'}, 'example_predictions', None), Node(report_accuracy, ['example_predictions', 'example_test_y'], None, None) ])} \u2015\u2015\u2015\u2015\u2015\u2015 FIND KEDRO END \u2015\u2015\u2015\u2015\u2015\u2015 { \"__default__\": [ \"split_data([example_iris_data,params:example_test_data_ratio]) -> [example_test_x,example_test_y,example_train_x,example_train_y]\", \"train_model([example_train_x,example_train_y,parameters]) -> [example_model]\", \"predict([example_model,example_test_x]) -> [example_predictions]\", \"report_accuracy([example_predictions,example_test_y]) -> None\" ], \"default_kedro_159.pipelines.data_engineering.pipeline\": [ \"split_data([example_iris_data,params:example_test_data_ratio]) -> [example_test_x,example_test_y,example_train_x,example_train_y]\" ], \"default_kedro_159.pipelines.data_science.pipeline\": [ \"train_model([example_train_x,example_train_y,parameters]) -> [example_model]\", \"predict([example_model,example_test_x]) -> [example_predictions]\", \"report_accuracy([example_predictions,example_test_y]) -> None\" ] }","title":"Verbose Examples"},{"location":"motivation/","text":"\u00b6 kedro is an amazing project that allows for super fast prototyping of data pipelines, yet yielding production ready pipelines. find-kedro enhances this experience by adding a pytest like node discovery eliminating the need to bubble up pipelines through modules. When Working on larger pipelines it is advisable to break your pipeline down into different submodules which requires knowledge of building python libraries, and knowing how to properly import each module. While this is not too difficult, in some cases it can trip up even the most senior engineers, loosing precious feature development time to debugging a library.","title":"motivation"},{"location":"motivation/#_1","text":"kedro is an amazing project that allows for super fast prototyping of data pipelines, yet yielding production ready pipelines. find-kedro enhances this experience by adding a pytest like node discovery eliminating the need to bubble up pipelines through modules. When Working on larger pipelines it is advisable to break your pipeline down into different submodules which requires knowledge of building python libraries, and knowing how to properly import each module. While this is not too difficult, in some cases it can trip up even the most senior engineers, loosing precious feature development time to debugging a library.","title":""},{"location":"python-usage/","text":"\u00b6 The reccomended usage of find-kedro is to implement it directly into your projects run.py module # my-proj/src/run.py from kedro.context import KedroContext from find_kedro import find_kedro class ProjectContext ( KedroContext ): def _get_pipelines ( self ) -> Pipeline : return find_kedro () Creating nodes \u00b6 find-kedro will not execute any functions, it will simply look for variables that match the pattern and identify if they are a kedro.pipeline.Pipeline , kedro.pipeline.nodes.Node , or a list of kedro.pipeline.nodes.Node . If so it will collect them into the dictionary of pipelines. There are currently three ways that pipelines are typically constructed with find-kedro ; lists , single-nodes , pipelines . Lists \u00b6 Any pattern matched list will be flattened and collected into the pipeline. They can be created all at once in the list definition. # my-proj/src/pipelinies/data_engineering/pipeline from kedro.pipeline import node from .nodes import split_data pipeline = [ node ( func = clean_columns , inputs = 'raw_iris' , outputs = 'int_iris' , name = \"create_int_iris\" , tags = [ 'iris' , 'int' ] ) ] // run find-kedro $ find-kedro { \"__default__\": [ \"create_int_iris\", ], \"pipelines.data_engineering.pipeline\": [ \"create_int_iris\", ], It is also convenient many times to keep the node definition close to the function definition of the node to be ran. for this reason. Many times I define the list at the top of the file, then append to it as I go. # my-proj/src/pipelinies/data_engineering/pipeline from kedro.pipeline import node from .nodes import split_data nodes = [] nodes . append ( node ( func = clean_columns , inputs = 'raw_iris' , outputs = 'int_iris' , name = \"create_int_iris\" , tags = [ 'iris' , 'int' ] ) ) ] ) Nodes \u00b6 All pattern matched kedro.pipeline.node.Node objects will be collected into the pipeline. # my-proj/pipelinies/data_engineering/pipeline from kedro.pipeline import node from .nodes import split_data clean_raw_iris_node = node ( func = clean_columns , inputs = 'raw_iris' , outputs = 'int_iris' , name = \"create_int_iris\" , tags = [ 'iris' , 'int' ] ) Pipeline \u00b6 All pattern matched kedro.pipeline.Pipeline objects will be collected into the pipeline. # my-proj/pipelinies/data_engineering/pipeline from kedro.pipeline import node , Pipeline from .nodes import split_data split_node = Pipeline ( [ node ( func = clean_columns , inputs = 'raw_iris' , outputs = 'int_iris' , name = \"create_int_iris\" , tags = [ 'iris' , 'int' ] ) ] ) Fully Qualified imports \u00b6 When using fully qualified imports from my_proj.pipelines.data_science.nodes import split_data instead of from .nodes split_data you will need to make sure that your project is installed, in your current path, or you set the directory","title":"python-usage"},{"location":"python-usage/#_1","text":"The reccomended usage of find-kedro is to implement it directly into your projects run.py module # my-proj/src/run.py from kedro.context import KedroContext from find_kedro import find_kedro class ProjectContext ( KedroContext ): def _get_pipelines ( self ) -> Pipeline : return find_kedro ()","title":""},{"location":"python-usage/#creating-nodes","text":"find-kedro will not execute any functions, it will simply look for variables that match the pattern and identify if they are a kedro.pipeline.Pipeline , kedro.pipeline.nodes.Node , or a list of kedro.pipeline.nodes.Node . If so it will collect them into the dictionary of pipelines. There are currently three ways that pipelines are typically constructed with find-kedro ; lists , single-nodes , pipelines .","title":"Creating nodes"},{"location":"python-usage/#lists","text":"Any pattern matched list will be flattened and collected into the pipeline. They can be created all at once in the list definition. # my-proj/src/pipelinies/data_engineering/pipeline from kedro.pipeline import node from .nodes import split_data pipeline = [ node ( func = clean_columns , inputs = 'raw_iris' , outputs = 'int_iris' , name = \"create_int_iris\" , tags = [ 'iris' , 'int' ] ) ] // run find-kedro $ find-kedro { \"__default__\": [ \"create_int_iris\", ], \"pipelines.data_engineering.pipeline\": [ \"create_int_iris\", ], It is also convenient many times to keep the node definition close to the function definition of the node to be ran. for this reason. Many times I define the list at the top of the file, then append to it as I go. # my-proj/src/pipelinies/data_engineering/pipeline from kedro.pipeline import node from .nodes import split_data nodes = [] nodes . append ( node ( func = clean_columns , inputs = 'raw_iris' , outputs = 'int_iris' , name = \"create_int_iris\" , tags = [ 'iris' , 'int' ] ) ) ] )","title":"Lists"},{"location":"python-usage/#nodes","text":"All pattern matched kedro.pipeline.node.Node objects will be collected into the pipeline. # my-proj/pipelinies/data_engineering/pipeline from kedro.pipeline import node from .nodes import split_data clean_raw_iris_node = node ( func = clean_columns , inputs = 'raw_iris' , outputs = 'int_iris' , name = \"create_int_iris\" , tags = [ 'iris' , 'int' ] )","title":"Nodes"},{"location":"python-usage/#pipeline","text":"All pattern matched kedro.pipeline.Pipeline objects will be collected into the pipeline. # my-proj/pipelinies/data_engineering/pipeline from kedro.pipeline import node , Pipeline from .nodes import split_data split_node = Pipeline ( [ node ( func = clean_columns , inputs = 'raw_iris' , outputs = 'int_iris' , name = \"create_int_iris\" , tags = [ 'iris' , 'int' ] ) ] )","title":"Pipeline"},{"location":"python-usage/#fully-qualified-imports","text":"When using fully qualified imports from my_proj.pipelines.data_science.nodes import split_data instead of from .nodes split_data you will need to make sure that your project is installed, in your current path, or you set the directory","title":"Fully Qualified imports"},{"location":"examples/iris/","text":"iris \u00b6 The iris dataset is a data science classic. It is part of the default kedro pipeline as of 0.15.9 if you choose to include an example pipeline, which we will use for this example. This is a great starting point for your very first experience with find-kedro . If you are already using kedro with a completed project there is no need to refactor it to use find-kedro , but if you want to implement it on an active project this example will show you how to refactor your existing kedro pipeline to use find-kedro . Create a new Environment and activate \u00b6 I CANNOT underemphasize the importance of separate environments for each project, for example, or toy that you create. Not only does it help your project be easier to run later, but it prevents you from causing major issues inside of environments for you active development projects. The LAST thing I want you to do is to wreck a day of work by installing find-kedro and wrecking dependencies in a working environment. example using conda \u00b6 $ conda create -n find-kedro-iris python = 3 .7 -y $ activate find-kedro-iris Install find-kedro and check the version \u00b6 Let's get after it and install kedro and find-kedro into our new environment. As I am unsure of what the iris example will look like in future versions of kedro I recommend following along with kedro==0.15.9 , but feel free to try it with the latest if you are feeling adventurous. STOP \u00b6 Before continuing on make sure that you are using a separate environment for this example using, conda, pipenv, virtualenv, or your environment manager of choice important. $ pip install kedro find-kedro let's check out our installation before moving forward and make sure everything looks right. $ kedro --version find-kedro, version 0.16.1 $ find-kedro --version find-kedro, version 0.0.5 $ find-kedro --help Usage: find-kedro [OPTIONS] Options: --file-patterns TEXT glob-style file patterns for Python node module discovery --patterns TEXT prefixes or glob names for Python pipeline, node, or list object discovery -d, --directory DIRECTORY Path to save the static site to -v, --verbose Prints extra information for debugging -V, --version Prints version and exits --help Show this message and exit. Checkpoint \u00b6 At this point your development machine is set up for the find-kedro-iris project. Next we will get the project started by using kedro-new kedro new \u00b6 Like I said before, this example is built off of the default kedro iris template. When Running kedro new make sure that you answer y to the last question in order to generate the example project. $ kedro new Follow through these answers \u00b6 Project Name: ============= Please enter a human readable name for your new project. Spaces and punctuation are allowed. [ New Kedro Project ] : Find Kedro Iris Repository Name: ================ Please enter a directory name for your new project repository. Alphanumeric characters, hyphens and underscores are allowed. Lowercase is recommended. [ find-kedro-iris ] : Python Package Name: ==================== Please enter a valid Python package name for your project package. Alphanumeric characters and underscores are allowed. Lowercase is recommended. Package name must start with a letter or underscore. [ find_kedro_iris ] : Generate Example Pipeline: ========================== Do you want to generate an example pipeline in your project? Good for first-time users. ( default = N ) [ y/N ] : y Change directory to the project generated in /mnt/c/temp/find-kedro-examples/find-kedro-iris A best-practice setup includes initialising git and creating a virtual environment before running ` kedro install ` to install project-specific dependencies. Refer to the Kedro documentation: https://kedro.readthedocs.io/ After you intall the default iris template go ahead and append find-kedro to the end of your find-kedro-iris/src/requirements.txt file. Next cd into the find-kedro-iris example directory, install kedro dependencies, and the project itself. It is very important that if you have any imports that are fully qualified/absolute i.e from find_kedro_iris.pipeline.data_engineering import pipeline that you install the project otherwise find-kedro will not be able to process the imports. $ cd find-kedro-iris $ kedro install $ pip install -e src Running find-kedro at this point will render an empty pipeline. $ find-kedro { \"__default__\": [] } implement find-kedro compatible pipelines \u00b6 find-kedro works by pattern matching variables that are either an iterable of nodes, a node, or a pipeline. By default, the pattern is set to any variable with pipeline or node in the name. In order to utilize the existing codebase, we will simply append the following to the end of src/find_kedro_iris/pipelines/data_science/pipeline.py . + data_science_pipeline = create_pipeline() And essentially the same to the end of src/find_kedro_iris/pipelines/data_engineering/pipeline.py + data_engineering_pipeline = create_pipeline() NOTE its important to have the word pipeline in the name or to change the default patterns in find-kedro . At this point, you should be able to run find-kedro and see that it is picking up pipelines from both modules, and that both modules get combined into the __default__ pipeline. $ find-kedro { \"__default__\": [ \"split_data([example_iris_data,params:example_test_data_ratio]) -> [example_test_x,example_test_y,example_train_x,example_train_y]\", \"train_model([example_train_x,example_train_y,parameters]) -> [example_model]\", \"predict([example_model,example_test_x]) -> [example_predictions]\", \"report_accuracy([example_predictions,example_test_y]) -> None\" ], \"src.find_kedro_iris.pipelines.data_engineering.pipeline\": [ \"split_data([example_iris_data,params:example_test_data_ratio]) -> [example_test_x,example_test_y,example_train_x,example_train_y]\" ], \"src.find_kedro_iris.pipelines.data_science.pipeline\": [ \"train_model([example_train_x,example_train_y,parameters]) -> [example_model]\", \"predict([example_model,example_test_x]) -> [example_predictions]\", \"report_accuracy([example_predictions,example_test_y]) -> None\" ] } I do prefer a bit shorter/cleaner pipeline names so I would personally pass in src/find_kedro_iris/pipelines as the directory to find-kedro . $ find-kedro -d src/find_kedro_iris/pipelines { \"__default__\": [ \"split_data([example_iris_data,params:example_test_data_ratio]) -> [example_test_x,example_test_y,example_train_x,example_train_y]\", \"train_model([example_train_x,example_train_y,parameters]) -> [example_model]\", \"predict([example_model,example_test_x]) -> [example_predictions]\", \"report_accuracy([example_predictions,example_test_y]) -> None\" ], \"data_engineering.pipeline\": [ \"split_data([example_iris_data,params:example_test_data_ratio]) -> [example_test_x,example_test_y,example_train_x,example_train_y]\" ], \"data_science.pipeline\": [ \"train_model([example_train_x,example_train_y,parameters]) -> [example_model]\", \"predict([example_model,example_test_x]) -> [example_predictions]\", \"report_accuracy([example_predictions,example_test_y]) -> None\" ] } Implement find-kedro plugin \u00b6 Now you can swap out create_pipelines for find-kedro , and it will be responsible for collecting pipelines for you. line 36 of src/find_kedro_iris/run.py - from find_kedro_iris.pipeline import create_pipelines + from find_kedro import find_kedro line 48 of def _get_pipelines(self) -> Dict[str, Pipeline]: - return create_pipelines() + return find_kedro() remove create_pipelines \u00b6 Since find-kedro is now responsible for collecting pipelines for you, the src/find_kedro_iris/pipelines.py is no longer used and can be removed. $ rm src/find_kedro_iris/pipelines.py Final Step \u00b6 \ud83e\udd1eFingers crossed it is time to run your pipeline. Running kedro run in your console should yield the following result. $ kedro run 2020-05-02 23:15:21,755 - root - INFO - ** Kedro project find-kedro-iris fatal: not a git repository (or any parent up to mount point /mnt) Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set). 2020-05-02 23:15:22,411 - kedro.versioning.journal - WARNING - Unable to git describe /mnt/c/temp/find-kedro-examples/find-kedro-iris /home/username/miniconda3/envs/find-kedro-iris/lib/python3.7/site-packages/fsspec/implementations/local.py:33: FutureWarning: The default value of auto_mkdir=True has been deprecated and will be changed to auto_mkdir=False by default in a future release. FutureWarning, 2020-05-02 23:15:24,849 - kedro.io.data_catalog - INFO - Loading data from `example_iris_data` (CSVDataSet)...2020-05-02 23:15:24,877 - kedro.io.data_catalog - INFO - Loading data from `params:example_test_data_ratio` (MemoryDataSet)... 2020-05-02 23:15:24,879 - kedro.pipeline.node - INFO - Running node: split_data([example_iris_data,params:example_test_data_ratio]) -> [example_test_x,example_test_y,example_train_x,example_train_y] 2020-05-02 23:15:24,928 - kedro.io.data_catalog - INFO - Saving data to `example_train_x` (MemoryDataSet)... 2020-05-02 23:15:24,929 - kedro.io.data_catalog - INFO - Saving data to `example_train_y` (MemoryDataSet)... 2020-05-02 23:15:24,930 - kedro.io.data_catalog - INFO - Saving data to `example_test_x` (MemoryDataSet)... 2020-05-02 23:15:24,931 - kedro.io.data_catalog - INFO - Saving data to `example_test_y` (MemoryDataSet)... 2020-05-02 23:15:24,933 - kedro.runner.sequential_runner - INFO - Completed 1 out of 4 tasks 2020-05-02 23:15:24,934 - kedro.io.data_catalog - INFO - Loading data from `example_train_x` (MemoryDataSet)... 2020-05-02 23:15:24,936 - kedro.io.data_catalog - INFO - Loading data from `example_train_y` (MemoryDataSet)... 2020-05-02 23:15:24,939 - kedro.io.data_catalog - INFO - Loading data from `parameters` (MemoryDataSet)... 2020-05-02 23:15:24,940 - kedro.pipeline.node - INFO - Running node: train_model([example_train_x,example_train_y,parameters]) -> [example_model] 2020-05-02 23:15:25,536 - kedro.io.data_catalog - INFO - Saving data to `example_model` (MemoryDataSet)... 2020-05-02 23:15:25,537 - kedro.runner.sequential_runner - INFO - Completed 2 out of 4 tasks 2020-05-02 23:15:25,538 - kedro.io.data_catalog - INFO - Loading data from `example_model` (MemoryDataSet)... 2020-05-02 23:15:25,539 - kedro.io.data_catalog - INFO - Loading data from `example_test_x` (MemoryDataSet)...2020-05-02 23:15:25,539 - kedro.pipeline.node - INFO - Running node: predict([example_model,example_test_x]) -> [example_predictions] 2020-05-02 23:15:25,543 - kedro.io.data_catalog - INFO - Saving data to `example_predictions` (MemoryDataSet)... 2020-05-02 23:15:25,544 - kedro.runner.sequential_runner - INFO - Completed 3 out of 4 tasks 2020-05-02 23:15:25,545 - kedro.io.data_catalog - INFO - Loading data from `example_predictions` (MemoryDataSet)... 2020-05-02 23:15:25,546 - kedro.io.data_catalog - INFO - Loading data from `example_test_y` (MemoryDataSet)...2020-05-02 23:15:25,546 - kedro.pipeline.node - INFO - Running node: report_accuracy([example_predictions,example_test_y]) -> None 2020-05-02 23:15:25,547 - src.find_kedro_iris.pipelines.data_science.nodes - INFO - Model accuracy on test set: 96.67% 2020-05-02 23:15:25,549 - kedro.runner.sequential_runner - INFO - Completed 4 out of 4 tasks 2020-05-02 23:15:25,550 - kedro.runner.sequential_runner - INFO - Pipeline execution completed successfully.","title":"iris"},{"location":"examples/iris/#iris","text":"The iris dataset is a data science classic. It is part of the default kedro pipeline as of 0.15.9 if you choose to include an example pipeline, which we will use for this example. This is a great starting point for your very first experience with find-kedro . If you are already using kedro with a completed project there is no need to refactor it to use find-kedro , but if you want to implement it on an active project this example will show you how to refactor your existing kedro pipeline to use find-kedro .","title":"iris"},{"location":"examples/iris/#create-a-new-environment-and-activate","text":"I CANNOT underemphasize the importance of separate environments for each project, for example, or toy that you create. Not only does it help your project be easier to run later, but it prevents you from causing major issues inside of environments for you active development projects. The LAST thing I want you to do is to wreck a day of work by installing find-kedro and wrecking dependencies in a working environment.","title":"Create a new Environment and activate"},{"location":"examples/iris/#example-using-conda","text":"$ conda create -n find-kedro-iris python = 3 .7 -y $ activate find-kedro-iris","title":"example using conda"},{"location":"examples/iris/#install-find-kedro-and-check-the-version","text":"Let's get after it and install kedro and find-kedro into our new environment. As I am unsure of what the iris example will look like in future versions of kedro I recommend following along with kedro==0.15.9 , but feel free to try it with the latest if you are feeling adventurous.","title":"Install find-kedro and check the version"},{"location":"examples/iris/#stop","text":"Before continuing on make sure that you are using a separate environment for this example using, conda, pipenv, virtualenv, or your environment manager of choice important. $ pip install kedro find-kedro let's check out our installation before moving forward and make sure everything looks right. $ kedro --version find-kedro, version 0.16.1 $ find-kedro --version find-kedro, version 0.0.5 $ find-kedro --help Usage: find-kedro [OPTIONS] Options: --file-patterns TEXT glob-style file patterns for Python node module discovery --patterns TEXT prefixes or glob names for Python pipeline, node, or list object discovery -d, --directory DIRECTORY Path to save the static site to -v, --verbose Prints extra information for debugging -V, --version Prints version and exits --help Show this message and exit.","title":"STOP"},{"location":"examples/iris/#checkpoint","text":"At this point your development machine is set up for the find-kedro-iris project. Next we will get the project started by using kedro-new","title":"Checkpoint"},{"location":"examples/iris/#kedro-new","text":"Like I said before, this example is built off of the default kedro iris template. When Running kedro new make sure that you answer y to the last question in order to generate the example project. $ kedro new","title":"kedro new"},{"location":"examples/iris/#follow-through-these-answers","text":"Project Name: ============= Please enter a human readable name for your new project. Spaces and punctuation are allowed. [ New Kedro Project ] : Find Kedro Iris Repository Name: ================ Please enter a directory name for your new project repository. Alphanumeric characters, hyphens and underscores are allowed. Lowercase is recommended. [ find-kedro-iris ] : Python Package Name: ==================== Please enter a valid Python package name for your project package. Alphanumeric characters and underscores are allowed. Lowercase is recommended. Package name must start with a letter or underscore. [ find_kedro_iris ] : Generate Example Pipeline: ========================== Do you want to generate an example pipeline in your project? Good for first-time users. ( default = N ) [ y/N ] : y Change directory to the project generated in /mnt/c/temp/find-kedro-examples/find-kedro-iris A best-practice setup includes initialising git and creating a virtual environment before running ` kedro install ` to install project-specific dependencies. Refer to the Kedro documentation: https://kedro.readthedocs.io/ After you intall the default iris template go ahead and append find-kedro to the end of your find-kedro-iris/src/requirements.txt file. Next cd into the find-kedro-iris example directory, install kedro dependencies, and the project itself. It is very important that if you have any imports that are fully qualified/absolute i.e from find_kedro_iris.pipeline.data_engineering import pipeline that you install the project otherwise find-kedro will not be able to process the imports. $ cd find-kedro-iris $ kedro install $ pip install -e src Running find-kedro at this point will render an empty pipeline. $ find-kedro { \"__default__\": [] }","title":"Follow through these answers"},{"location":"examples/iris/#implement-find-kedro-compatible-pipelines","text":"find-kedro works by pattern matching variables that are either an iterable of nodes, a node, or a pipeline. By default, the pattern is set to any variable with pipeline or node in the name. In order to utilize the existing codebase, we will simply append the following to the end of src/find_kedro_iris/pipelines/data_science/pipeline.py . + data_science_pipeline = create_pipeline() And essentially the same to the end of src/find_kedro_iris/pipelines/data_engineering/pipeline.py + data_engineering_pipeline = create_pipeline() NOTE its important to have the word pipeline in the name or to change the default patterns in find-kedro . At this point, you should be able to run find-kedro and see that it is picking up pipelines from both modules, and that both modules get combined into the __default__ pipeline. $ find-kedro { \"__default__\": [ \"split_data([example_iris_data,params:example_test_data_ratio]) -> [example_test_x,example_test_y,example_train_x,example_train_y]\", \"train_model([example_train_x,example_train_y,parameters]) -> [example_model]\", \"predict([example_model,example_test_x]) -> [example_predictions]\", \"report_accuracy([example_predictions,example_test_y]) -> None\" ], \"src.find_kedro_iris.pipelines.data_engineering.pipeline\": [ \"split_data([example_iris_data,params:example_test_data_ratio]) -> [example_test_x,example_test_y,example_train_x,example_train_y]\" ], \"src.find_kedro_iris.pipelines.data_science.pipeline\": [ \"train_model([example_train_x,example_train_y,parameters]) -> [example_model]\", \"predict([example_model,example_test_x]) -> [example_predictions]\", \"report_accuracy([example_predictions,example_test_y]) -> None\" ] } I do prefer a bit shorter/cleaner pipeline names so I would personally pass in src/find_kedro_iris/pipelines as the directory to find-kedro . $ find-kedro -d src/find_kedro_iris/pipelines { \"__default__\": [ \"split_data([example_iris_data,params:example_test_data_ratio]) -> [example_test_x,example_test_y,example_train_x,example_train_y]\", \"train_model([example_train_x,example_train_y,parameters]) -> [example_model]\", \"predict([example_model,example_test_x]) -> [example_predictions]\", \"report_accuracy([example_predictions,example_test_y]) -> None\" ], \"data_engineering.pipeline\": [ \"split_data([example_iris_data,params:example_test_data_ratio]) -> [example_test_x,example_test_y,example_train_x,example_train_y]\" ], \"data_science.pipeline\": [ \"train_model([example_train_x,example_train_y,parameters]) -> [example_model]\", \"predict([example_model,example_test_x]) -> [example_predictions]\", \"report_accuracy([example_predictions,example_test_y]) -> None\" ] }","title":"implement find-kedro compatible pipelines"},{"location":"examples/iris/#implement-find-kedro-plugin","text":"Now you can swap out create_pipelines for find-kedro , and it will be responsible for collecting pipelines for you. line 36 of src/find_kedro_iris/run.py - from find_kedro_iris.pipeline import create_pipelines + from find_kedro import find_kedro line 48 of def _get_pipelines(self) -> Dict[str, Pipeline]: - return create_pipelines() + return find_kedro()","title":"Implement find-kedro plugin"},{"location":"examples/iris/#remove-create_pipelines","text":"Since find-kedro is now responsible for collecting pipelines for you, the src/find_kedro_iris/pipelines.py is no longer used and can be removed. $ rm src/find_kedro_iris/pipelines.py","title":"remove create_pipelines"},{"location":"examples/iris/#final-step","text":"\ud83e\udd1eFingers crossed it is time to run your pipeline. Running kedro run in your console should yield the following result. $ kedro run 2020-05-02 23:15:21,755 - root - INFO - ** Kedro project find-kedro-iris fatal: not a git repository (or any parent up to mount point /mnt) Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set). 2020-05-02 23:15:22,411 - kedro.versioning.journal - WARNING - Unable to git describe /mnt/c/temp/find-kedro-examples/find-kedro-iris /home/username/miniconda3/envs/find-kedro-iris/lib/python3.7/site-packages/fsspec/implementations/local.py:33: FutureWarning: The default value of auto_mkdir=True has been deprecated and will be changed to auto_mkdir=False by default in a future release. FutureWarning, 2020-05-02 23:15:24,849 - kedro.io.data_catalog - INFO - Loading data from `example_iris_data` (CSVDataSet)...2020-05-02 23:15:24,877 - kedro.io.data_catalog - INFO - Loading data from `params:example_test_data_ratio` (MemoryDataSet)... 2020-05-02 23:15:24,879 - kedro.pipeline.node - INFO - Running node: split_data([example_iris_data,params:example_test_data_ratio]) -> [example_test_x,example_test_y,example_train_x,example_train_y] 2020-05-02 23:15:24,928 - kedro.io.data_catalog - INFO - Saving data to `example_train_x` (MemoryDataSet)... 2020-05-02 23:15:24,929 - kedro.io.data_catalog - INFO - Saving data to `example_train_y` (MemoryDataSet)... 2020-05-02 23:15:24,930 - kedro.io.data_catalog - INFO - Saving data to `example_test_x` (MemoryDataSet)... 2020-05-02 23:15:24,931 - kedro.io.data_catalog - INFO - Saving data to `example_test_y` (MemoryDataSet)... 2020-05-02 23:15:24,933 - kedro.runner.sequential_runner - INFO - Completed 1 out of 4 tasks 2020-05-02 23:15:24,934 - kedro.io.data_catalog - INFO - Loading data from `example_train_x` (MemoryDataSet)... 2020-05-02 23:15:24,936 - kedro.io.data_catalog - INFO - Loading data from `example_train_y` (MemoryDataSet)... 2020-05-02 23:15:24,939 - kedro.io.data_catalog - INFO - Loading data from `parameters` (MemoryDataSet)... 2020-05-02 23:15:24,940 - kedro.pipeline.node - INFO - Running node: train_model([example_train_x,example_train_y,parameters]) -> [example_model] 2020-05-02 23:15:25,536 - kedro.io.data_catalog - INFO - Saving data to `example_model` (MemoryDataSet)... 2020-05-02 23:15:25,537 - kedro.runner.sequential_runner - INFO - Completed 2 out of 4 tasks 2020-05-02 23:15:25,538 - kedro.io.data_catalog - INFO - Loading data from `example_model` (MemoryDataSet)... 2020-05-02 23:15:25,539 - kedro.io.data_catalog - INFO - Loading data from `example_test_x` (MemoryDataSet)...2020-05-02 23:15:25,539 - kedro.pipeline.node - INFO - Running node: predict([example_model,example_test_x]) -> [example_predictions] 2020-05-02 23:15:25,543 - kedro.io.data_catalog - INFO - Saving data to `example_predictions` (MemoryDataSet)... 2020-05-02 23:15:25,544 - kedro.runner.sequential_runner - INFO - Completed 3 out of 4 tasks 2020-05-02 23:15:25,545 - kedro.io.data_catalog - INFO - Loading data from `example_predictions` (MemoryDataSet)... 2020-05-02 23:15:25,546 - kedro.io.data_catalog - INFO - Loading data from `example_test_y` (MemoryDataSet)...2020-05-02 23:15:25,546 - kedro.pipeline.node - INFO - Running node: report_accuracy([example_predictions,example_test_y]) -> None 2020-05-02 23:15:25,547 - src.find_kedro_iris.pipelines.data_science.nodes - INFO - Model accuracy on test set: 96.67% 2020-05-02 23:15:25,549 - kedro.runner.sequential_runner - INFO - Completed 4 out of 4 tasks 2020-05-02 23:15:25,550 - kedro.runner.sequential_runner - INFO - Pipeline execution completed successfully.","title":"Final Step"},{"location":"examples/more-nodes/","text":"More Nodes Example \u00b6","title":"More Nodes Example"},{"location":"examples/more-nodes/#more-nodes-example","text":"","title":"More Nodes Example"},{"location":"examples/spaceflights/","text":"","title":"Spaceflights"},{"location":"examples/titanic/","text":"","title":"Titanic"}]}